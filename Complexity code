# -*- coding: utf-8 -*-
"""
Created on Tue Jan 19 14:10:45 2021

@author: isabe
"""
import random
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
    
class Oslo:
    def __init__(self, L):
        self.L = L
        self.s = 0
        self.t = 0
        self.T = []
        self.z_th = np.zeros(L)
        self.slope = np.zeros(L)
        self.h = 0
        self.H = []
        self.Hi = []
        self.S = []
        self.height_pile = np.zeros(L)
        self.is_at_steady_state = False
        
    def Height(self):
        return self.H
    def slope(self):
        return self.slope
    def time(self):
        return self.T
    def Si(self):
        return self.S
    def threshold(self):
        for i in range(len(self.z_th)):            
            self.z_th[i] = random.randint(1,2)            
        return self.z_th
    def pile_height(self):
        return self.height_pile
    def relax(self):
        for i in range(len(self.z_th)):            
            self.z_th[i] = random.randint(1,2)
        running = True
        while running==True:
            self.H=self.H+[self.h]
            self.height_pile[0] += 1
            self.h += 1
            self.s = 0
            self.slope[0] += 1
            A = 0
            while A == 0:
                A = 1
                for i in range(0,self.L):
                    if self.slope[i] > self.z_th[i]:
                        A = 0
                        self.height_pile[i] -=1
                        
                        if i == 0:
                            self.slope[i+1] +=1
                            self.slope[i]-=2
                            self.height_pile[i+1]+=1
                            self.h -=1
                            self.z_th[i]= random.randint(1,2)
                            self.s+=1   
                            
                        elif i != self.L-1:
                            self.slope[i+1] +=1
                            self.slope[i]-=2
                            self.height_pile[i+1]+=1
                            self.slope[i-1] += 1
                            self.z_th[i]= random.randint(1,2)
                            self.s+=1  
                            
                        elif i == self.L - 1:
                            self.slope[i] -= 1
                            self.slope[i-1] += 1
                            self.z_th[i]= random.randint(1,2)
                            self.s+=1
                            
            self.S=self.S+[self.s]
            self.T=self.T+[self.t]
            self.t+=1
            if self.t>55000:        
                running=False
        return self.slope

    def tc(self):
        average = sum(self.H[54000:])/len(self.H[54000:])
        yes=False
        global Tc
        Tc = []
        for i in range(0, len(self.H)):
            if self.H[i] > average and yes==False:
                Tc = self.T[i] 
                yes=True                   
        return Tc                
    
"""
#Plot Height V time
             
testoslo = Oslo(16)
z_th = testoslo.threshold()
pile = testoslo.pile_height()
x = testoslo.relax()   
Si = testoslo.Si() 
T = testoslo.time()
H1 = testoslo.Height()
av16 = sum(H1[300:])/len(H1[300:])
#plt.plot(T,H1, label= '16')
#print(av16)

testoslo1 = Oslo(32) 
slope = testoslo1.relax()
T = testoslo1.time()
H2 = testoslo1.Height()
#plt.plot(T,H2, label= '32') 
#av32 = sum(H2[1000:])/len(H2[1000:])
#print(av32)

testoslo2 = Oslo(64) 
slope = testoslo2.relax()
T = testoslo2.time()
H3 = testoslo2.Height()
#plt.plot(T, H3, label= '64') 

testoslo3 = Oslo(128) 
slope = testoslo3.relax()
T = testoslo3.time()
H4 = testoslo3.Height() 
#plt.plot(T, H4, label= '128')

#plt.title('Height of Pile Against Time for Different System Sizes')
#plt.xlabel('T')
#plt.ylabel('Height')
#plt.legend()

#Test against BTW model where p=1 for L = 32
#changed zth in the model to be 1
plt.plot(T, H2, label = 'BTW')
plt.title('BTW and Oslo Model')
plt.xlabel('T')
plt.ylabel('Height')
plt.legend()

"""
#a =sum(H1[400:])/len(H1[400:])
testoslo = Oslo(16)
z_th = testoslo.threshold()
pile = testoslo.pile_height()
x = testoslo.relax()   
Si = testoslo.Si() 
T = testoslo.time()
H1 = testoslo.Height() 

testoslo0 = Oslo(8)
x = testoslo0.relax()
H0 = testoslo0.Height()
testoslo1 = Oslo(32)
x = testoslo1.relax()
H2 = testoslo1.Height()
testoslo2 = Oslo(64)
x = testoslo2.relax()
H3 = testoslo2.Height() 
testoslo3 = Oslo(128)
x = testoslo3.relax()
H4 = testoslo3.Height()
testoslo4 = Oslo(256)
x = testoslo4.relax()
H5 = testoslo4.Height()

H = [H0, H1, H2, H3, H4, H5]
Av=[]
for x in range(0,len(H)):
    window_size = 3
    
    i = 0
    moving_averages = []
    while i < len(H[x]) - window_size + 1:
        this_window = H[x][i : i + window_size]    
        window_average = sum(this_window) / window_size
        moving_averages.append(window_average) #Line 172 to 180 taken from: https://www.kite.com/python/answers/how-to-find-the-moving-average-of-a-list-in-python#:~:text=Use%20sum()%20to%20calculate%20moving%20averages&text=Iterate%20through%20the%20original%20list,the%20list%20of%20moving%20averages.
        i += 1
    Av=Av+[moving_averages]
    #print(moving_averages)   
Tav=[]
for x in range(1,55000):
    Tav=Tav+[x]
    
#Crossover Times
plt.loglog(Tav[10:], Av[0][10:],label = '8')
plt.loglog(Tav[10:], Av[1][10:],label = '16')
plt.loglog(Tav[10:], Av[2][10:],label = '32')
plt.loglog(Tav[10:], Av[3][10:],label = '64')
plt.loglog(Tav[10:], Av[4][10:],label = '128')
plt.xlabel('t')
plt.ylabel('Moving Average Heights')
plt.legend()

T0 = testoslo0.tc()
T1 = testoslo.tc()
T2 = testoslo1.tc()
T3 = testoslo2.tc() 
T4 = testoslo3.tc()
T5 = testoslo4.tc()
Crossover_t = [T0, T1, T2, T3, T4, T5]

'''
#Data Collapse
a = 0
for i in [8, 16, 32, 64, 128]:
    for x in range(0,len(Tav)):
        Tav[x]=Tav[x]/(i**2)
    for x in range(0,len(Av[a])):
        Av[a][x]=Av[a][x]/i
    if a == 0:
        plt.loglog(Tav[100:], Av[a][100:], label= '8' )
    if a == 1:
        plt.loglog(Tav[100:], Av[a][100:], label= '16' )
    if a == 2:
        plt.loglog(Tav[100:], Av[a][100:], label= '32' )
    if a == 3:
        plt.loglog(Tav[100:], Av[a][100:], label= '64')
    if a == 4:
        plt.loglog(Tav[100:], Av[a][100:], label= '128' )
    Tav=[]
    for x in range(1,55000):
        Tav=Tav+[x]
    a +=1

plt.xlabel('t/L**2')
plt.ylabel('Av heights/ L')
plt.legend()

#Transient State
#A system is said to be in a transient state when a process variable or variables 
#have been changed and the system has not yet reached a steady state.
def power_law(T, c, b):
    return c*np.power(T, b) # Line 237 and 238 taken from: https://towardsdatascience.com/basic-curve-fitting-of-scientific-data-with-python-9592244a2509
(c, b), cov = curve_fit(power_law, Tav[10:], Av[5][10:]) 
print((c, b))
plt.plot(Tav[10:], Av[5][10:], label = '256')
plt.plot(Tav[10:], power_law(Tav[10:], a, p), label='fit', color='red')
plt.xlabel('t')
plt.ylabel('Av heights')
plt.legend()
'''
Average_height = []
standard_deviation_t = []
standard_number = []

to = []
for a in Crossover_t:
    To = [i for i in Tav if i >= a]
    to = to + [To]
for x in range(0, len(H)):
    ah = sum(H[x][Crossover_t[x]:])/len(to[x])
    st = np.sqrt(sum((i*i for i in H[x][Crossover_t[x]:]))/len(to[x]) - ah**2)
    standard = np.std(H[x][Crossover_t[x]:])            
    Average_height = Average_height + [ah]
    standard_deviation_t =standard_deviation_t + [st]
    standard_number = standard_number + [standard]
    
Avh = np.asarray(Average_height)
L = np.asarray([8, 16, 32, 64, 128, 256])
testl = np.arange(1, 400)

#From the data collapse graph can see that a0 should be about 1.7
def correction(testl, a0, a1, w1):
    return a0*testl*(1-a1*np.power(testl, -w1))
popt, pcov = curve_fit(correction, L, Avh, bounds =([0,0,-10], [10,10,10]))
a0, a1, w1 = popt
print((a0, a1, w1)) # Cant expect to get the best fit when fitting three parameters
print(pcov) 
plt.plot(testl, correction(testl, *popt), 'r-')
plt.plot(L, Avh, '.')
plt.xscale("log")
plt.yscale("log",basey=2)
plt.xlabel('L')
plt.ylabel('<h>')
plt.show()

def correction2(testl, A1, W1):
    return (1-A1*np.power(testl, -W1))
h_over_La0 = []
for i in range(0, len(L)):
    h_La0 = Avh[i]/(L[i]*a0)
    h_over_La0 = h_over_La0 + [h_La0]
popt2, pcov2 = curve_fit(correction2, L, h_over_La0)
A1, W1 = popt2
print((A1, W1))
plt.loglog(L, h_over_La0, '.')
plt.plot(testl, correction2(testl, *popt2), 'r-')
plt.xlabel('L')
plt.ylabel('$<h>/a0*L$')
plt.show()

plt.loglog(L, Avh / (a0 * L ), '.', label='data')
plt.plot(testl, correction(testl, a0, a1, w1) / (a0 * testl), label='fit')
#plt.axis((0, 350, 0.9, 1.05))
plt.xlabel('L')
plt.ylabel('$<h>/a0*L$')
plt.show()

'''
Standard deviation
'''
def power_law(testl, n, w):
    return n*np.power(testl, w)
std, scov = curve_fit(power_law, L, standard_number)
(n, w) = std
print(std)
plt.loglog(L, power_law(L, *std), 'r-')
plt.loglog(L, standard_number, '.')
plt.xlabel("$L$" )
plt.ylabel("$\sigma_h$")
plt.axis(( 0, 300, 1e-1, 10))
plt.legend()

plt.plot(L, standard_number / (n * np.power(L, w)), '.', label='data')
plt.plot(testl, power_law(testl, n, w) / (n * np.power(testl, w)), label='fit')

plt.xlabel("$L$")
plt.ylabel("$\sigma_h/nL^w$")
#plt.axis((0, 300, 0.95, 1.05))
plt.legend()

'''
Probability of height
'''            
freq=np.zeros((len(H),int(Average_height[-1]+20)))
probability=np.zeros((len(H),int(Average_height[-1]+20)))
for x in range(0,len(H)):
    for y in range(0,int(Average_height[-1]+20)):
        for z in range(Crossover_t[x],len(Tav)):
            if y==H[x][z]:
                freq[x][y]+=1
for x in range(0,len(H)):
    for y in range(0,int(Average_height[-1]+20)):
        probability[x][y]=freq[x][y]/sum(freq[x])

hei =range(0,449)
for i in range(0,6):
    plt.plot(hei, probability[i], label= L[i])
plt.xlabel("h")
plt.ylabel("$P(h; L)$")
plt.legend()

for i in range(0, 6):
    plt.plot([ a*np.power(L[i], -w) for a in ([x - Avh[i] for x in hei])], [x * np.power(L[i], w) for x in probability[i]], label = L[i])
plt.xlabel("$(h- <h>)/L^w$")
plt.ylabel("$P(h; L)L^w$") 
plt.axis((-4, 4, 0, 0.6))   
plt.legend()    

'''
Task 3a
'''

def logbin(data, scale = 1., zeros = False):
    if scale < 1:
        raise ValueError('Function requires scale >= 1.')
    count = np.bincount(data)
    tot = np.sum(count)
    smax = np.max(data)
    if scale > 1:
        jmax = np.ceil(np.log(smax)/np.log(scale))
        if zeros:
            binedges = scale ** np.arange(jmax + 1)
            binedges[0] = 0
        else:
            binedges = scale ** np.arange(1,jmax + 1)
            # count = count[1:]
        binedges = np.unique(binedges.astype('uint64'))
        x = (binedges[:-1] * (binedges[1:]-1)) ** 0.5
        y = np.zeros_like(x)
        count = count.astype('float')
        for i in range(len(y)):
            y[i] = np.sum(count[binedges[i]:binedges[i+1]]/(binedges[i+1] - binedges[i]))
            print(binedges[i],binedges[i+1])
        print(smax,jmax,binedges,x)
        print(x,y)
    else:
        x = np.nonzero(count)[0]
        y = count[count != 0].astype('float')
        if zeros != True and x[0] == 0:
            x = x[1:]
            y = y[1:]
    y /= tot
    x = x[y!=0]
    y = y[y!=0]
    return x,y

data8 = testoslo0.Si()
data16 = testoslo.Si()
data32 = testoslo1.Si()
data64 = testoslo2.Si()
data128 = testoslo3.Si()
data256 = testoslo4.Si()

s256 = data256[T5:]
s128 = data128[T4:]
s64 = data64[T3:]
s32 = data32[T2:]
s16 = data16[T1:]
s8 = data8[T0:]

N = 100000
ss = [s8[-N:], s16[-N:], s32[-N:], s64[-N:], s128[-N:], s256[-N:]]
#raw probability for L = 64
No_s =[]
for i in range(0, len(s64[-N:])):
    ats = s64[-N:].count(i)
    No_s = No_s + [ats]
prob_s = []
for n in No_s:
    prob_s.append(n / N)
plt.loglog(s64[-N:], prob_s, '.')

binprob = []
centres = []
for i in range(0, len(ss)):    
    centre, bin_probs = logbin(ss[i][-N:], scale = 1.3)
    binprob = binprob + [bin_probs]
    centres = centres +[centre]
    plt.loglog(centre, bin_probs, label = L[i])
plt.xlabel("s")
plt.ylabel("$P(s; L)$")
plt.legend()

centre128, binprob128 = logbin(s128[-N:], scale = 1.3)
plt.loglog(centre128, binprob128, '.', label = 'L= 128')  #follows power law

cs = np.arange(1, 100000)
centre128 = np.asarray(centre128)
def powerlaw(cs, j, Ts):
    return j*np.power(cs, Ts)
(j, Ts), tcov = curve_fit(powerlaw, centre128[8:-11], binprob128[8:-11])
print(j,Ts)
plt.loglog(cs, powerlaw(cs, *(j,Ts)), 'r-', label = 'fit')
plt.xlabel("$s$")
plt.ylabel("$P_N(s;L)$")
plt.legend()

ts = -Ts
sts = []
for i in range(0,6):
    s_ts=[]
    for y in range(0, len(centres[i])):        
        s_ts = s_ts+ [centres[i][y]**(ts)]
    sts = sts + [s_ts]
for i in range(0,6):
    Pst = [a * b for a, b in zip(sts[i], binprob[i])]
    plt.loglog(centres[i], Pst, label = L[i])
plt.xlabel("$s$")
plt.ylabel(r"$s^{\tau_s} \widetilde P_N(s;L)$") 
plt.legend()  

D =2.12
sld = []
for i in range(0,6):
    s_ld=[]
    for y in range(0, len(centres[i])):        
        s_ld = s_ld+ [centres[i][y]/(L[i]**D)]
    sld = sld + [s_ld]
for i in range(0,6):
    Pst = [a * b for a, b in zip(sts[i], binprob[i])]
    plt.loglog(sld[i], Pst, label = L[i])
plt.xlabel("$s/L^D$")
plt.ylabel(r"$s^{\tau_s} \widetilde P_N(s;L)$") 
plt.legend() 
    
'''
Task 3b
'''
k = [1, 2, 3, 4]
sk = []
for K in k:
    s_k = []
    for i in range(0, len(ss)):         
        s_k = s_k +[sum([x**K for x in ss[i]])/len(ss[i])]
    sk = sk + [s_k]
for i in range(0, 4):
    plt.loglog(L, sk[i], '.', label = k[i])
plt.xlabel("L")
plt.ylabel("$<s^k>$")
plt.legend()
plt.show()
#Fit only last three points for L>>1
def linear_reg(testl, lo, e):
    return lo*testl + e
kslope = []
for i in range(0, 4):
    (lo, e), lcov = curve_fit(linear_reg, np.log(L[:-3]), np.log(sk[i][:-3]))
    plt.loglog(L, sk[i], '.', label = k[i])
    plt.loglog(testl, power_law(testl, np.exp(lo, e)))
    kslope = kslope + [e]

ks_ = np.arange(7)
(c, D), cov = curve_fit(linear_reg, k, kslope)
print(c, D)

tau_s = 1 - c / D
print(tau_s)

plt.plot(ks_, linear_reg(ks_, c, D), color='black', label='fit')
plt.legend()
plt.show()
